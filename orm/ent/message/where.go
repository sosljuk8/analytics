// Code generated by ent, DO NOT EDIT.

package message

import (
	"entgo.io/ent/dialect/sql"
	"github.com/sosljuk8/analytics/orm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Direction applies equality check predicate on the "Direction" field. It's identical to DirectionEQ.
func Direction(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDirection, v))
}

// Sent applies equality check predicate on the "Sent" field. It's identical to SentEQ.
func Sent(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSent, v))
}

// MailboxId applies equality check predicate on the "MailboxId" field. It's identical to MailboxIdEQ.
func MailboxId(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMailboxId, v))
}

// CrmRid applies equality check predicate on the "CrmRid" field. It's identical to CrmRidEQ.
func CrmRid(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCrmRid, v))
}

// DirectionEQ applies the EQ predicate on the "Direction" field.
func DirectionEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldDirection, v))
}

// DirectionNEQ applies the NEQ predicate on the "Direction" field.
func DirectionNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldDirection, v))
}

// DirectionIn applies the In predicate on the "Direction" field.
func DirectionIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldDirection, vs...))
}

// DirectionNotIn applies the NotIn predicate on the "Direction" field.
func DirectionNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldDirection, vs...))
}

// DirectionGT applies the GT predicate on the "Direction" field.
func DirectionGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldDirection, v))
}

// DirectionGTE applies the GTE predicate on the "Direction" field.
func DirectionGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldDirection, v))
}

// DirectionLT applies the LT predicate on the "Direction" field.
func DirectionLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldDirection, v))
}

// DirectionLTE applies the LTE predicate on the "Direction" field.
func DirectionLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldDirection, v))
}

// DirectionContains applies the Contains predicate on the "Direction" field.
func DirectionContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldDirection, v))
}

// DirectionHasPrefix applies the HasPrefix predicate on the "Direction" field.
func DirectionHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldDirection, v))
}

// DirectionHasSuffix applies the HasSuffix predicate on the "Direction" field.
func DirectionHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldDirection, v))
}

// DirectionEqualFold applies the EqualFold predicate on the "Direction" field.
func DirectionEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldDirection, v))
}

// DirectionContainsFold applies the ContainsFold predicate on the "Direction" field.
func DirectionContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldDirection, v))
}

// SentEQ applies the EQ predicate on the "Sent" field.
func SentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSent, v))
}

// SentNEQ applies the NEQ predicate on the "Sent" field.
func SentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSent, v))
}

// SentIn applies the In predicate on the "Sent" field.
func SentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSent, vs...))
}

// SentNotIn applies the NotIn predicate on the "Sent" field.
func SentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSent, vs...))
}

// SentGT applies the GT predicate on the "Sent" field.
func SentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSent, v))
}

// SentGTE applies the GTE predicate on the "Sent" field.
func SentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSent, v))
}

// SentLT applies the LT predicate on the "Sent" field.
func SentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSent, v))
}

// SentLTE applies the LTE predicate on the "Sent" field.
func SentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSent, v))
}

// SentContains applies the Contains predicate on the "Sent" field.
func SentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldSent, v))
}

// SentHasPrefix applies the HasPrefix predicate on the "Sent" field.
func SentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldSent, v))
}

// SentHasSuffix applies the HasSuffix predicate on the "Sent" field.
func SentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldSent, v))
}

// SentEqualFold applies the EqualFold predicate on the "Sent" field.
func SentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldSent, v))
}

// SentContainsFold applies the ContainsFold predicate on the "Sent" field.
func SentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldSent, v))
}

// MailboxIdEQ applies the EQ predicate on the "MailboxId" field.
func MailboxIdEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMailboxId, v))
}

// MailboxIdNEQ applies the NEQ predicate on the "MailboxId" field.
func MailboxIdNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMailboxId, v))
}

// MailboxIdIn applies the In predicate on the "MailboxId" field.
func MailboxIdIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMailboxId, vs...))
}

// MailboxIdNotIn applies the NotIn predicate on the "MailboxId" field.
func MailboxIdNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMailboxId, vs...))
}

// MailboxIdGT applies the GT predicate on the "MailboxId" field.
func MailboxIdGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldMailboxId, v))
}

// MailboxIdGTE applies the GTE predicate on the "MailboxId" field.
func MailboxIdGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldMailboxId, v))
}

// MailboxIdLT applies the LT predicate on the "MailboxId" field.
func MailboxIdLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldMailboxId, v))
}

// MailboxIdLTE applies the LTE predicate on the "MailboxId" field.
func MailboxIdLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldMailboxId, v))
}

// CrmRidEQ applies the EQ predicate on the "CrmRid" field.
func CrmRidEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCrmRid, v))
}

// CrmRidNEQ applies the NEQ predicate on the "CrmRid" field.
func CrmRidNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCrmRid, v))
}

// CrmRidIn applies the In predicate on the "CrmRid" field.
func CrmRidIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCrmRid, vs...))
}

// CrmRidNotIn applies the NotIn predicate on the "CrmRid" field.
func CrmRidNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCrmRid, vs...))
}

// CrmRidGT applies the GT predicate on the "CrmRid" field.
func CrmRidGT(v int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCrmRid, v))
}

// CrmRidGTE applies the GTE predicate on the "CrmRid" field.
func CrmRidGTE(v int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCrmRid, v))
}

// CrmRidLT applies the LT predicate on the "CrmRid" field.
func CrmRidLT(v int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCrmRid, v))
}

// CrmRidLTE applies the LTE predicate on the "CrmRid" field.
func CrmRidLTE(v int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCrmRid, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		p(s.Not())
	})
}
